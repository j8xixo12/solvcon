language: cpp
dist: xenial

cache:
  directory:
  - $HOME/miniconda

notifications:
  slack:
    rooms:
      secure: bW29JOqmFy0GnsX5epQDSA6vf4urxXTjxx+a7saHLKel3+VjBZvAUNRXC9tKNp6SkmIReuRAccCKe5XjWnadSxn6/mmUxWS/w+D95flTs8AFjycglr8rNLf8CQsjtg3IrcxuSoh9BJNbf7Ae/bqJ0LZSf8hdsQnSKHd7BxFuld8Pevtf2mwte97hVeO5xyCZH/dGvhTUzl8Ygzn+cZBNGwkh6rUwn2H2eIN9azoVzHVlvvPWg7IZC1L48CkijXqWgm1mhxQMRDyPw7UjABuORTCF3py7gUrib9AP67uSyU1oxIovehMtQ8WhbE7WXqX3RASm/NgP9dbXPo8nF5qe2vNzCVD1Y2y0EGVnvq38cLVIGS97NCm/Njnlb7nGqpWPhx1i0VnlxqD0uqmOxcolqnVQuw41+a+ZsH0OwCWg6xRJhSSdZxAZm8z88U1LhpJX5tfOlbV47ZoBA+0Gf+F3FFzu/k6TO8vdaeDrdBuzlaMrHZdVe42Wd0JGnvUToEzCRklvjMuPNGfsPrtAFfYzPhaZ53VGGW4nS1/x5bjTCN6BvFrSErFkUCrmfvee9+ltMovbw/b/wchnnyPX0X1qfseaDZIQ6860A7D6Tcv6DnrnflfbLLhZkfuGGkRhKAmASdB8gGBpgNJVoeAXbdJVJCJCSPCxMN1B15dZdHNvzfc=
    on_success: always  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/b446fff58c8ee17b216d
    on_success: always  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: never     # options: [always|never|change] default: always

env:
  global:
    # Disable GCE boto plugin which is incompatible to Python 3, see
    # https://github.com/travis-ci/travis-ci/issues/5246
    - BOTO_CONFIG=/tmp/nowhere

matrix:
  include:
    - os: linux
      sudo: required
      services: docker
      env: RUNMODE=docker
    - os: linux
      sudo: required
      compiler: gcc
      env: RUNMODE=travis
      addons:
        # If using C++11/14 see http://genbattle.bitbucket.org/blog/2016/01/17/c++-travis-ci/
        apt:
          packages: [ openssh-client, openssh-server, liblapack-pic, liblapack-dev ]
    - os: linux
      sudo: required
      compiler: gcc
      env: RUNMODE=singularity
      addons:
        apt:
          packages: [ squashfs-tools, libarchive-dev, debootstrap ]
    - os: osx
      #osx_image: xcode7.3
      compiler: clang
      env: RUNMODE=travis

before_install:
  - |
    if [[ "$RUNMODE" == "docker" ]] ; then
      # Configure docker
      DOCKER=solvcon/solvcon_build
      docker pull $DOCKER

      containerid=$(docker run --detach --tty \
        --volume=${TRAVIS_BUILD_DIR}:${TRAVIS_BUILD_DIR} \
        --workdir=${TRAVIS_BUILD_DIR} \
        $DOCKER)

      SCRIPT_RUN_PREFIX="docker exec --tty $containerid"
    elif [[ "$RUNMODE" == "singularity" ]] ; then
      # prepare Singularity
      SHOME=`mktemp -d /tmp/singularity-${USER}-XXX`
      SIMAGE="${SHOME}/solvcon.img"
      SRECIPE="Singularity"
      SOLVCON_DRIVING="go"
      mkdir $SHOME
      pushd $SHOME
      VERSION=2.5.1
      wget https://github.com/singularityware/singularity/releases/download/$VERSION/singularity-$VERSION.tar.gz
      tar xvf singularity-$VERSION.tar.gz
      cd singularity-$VERSION
      ./configure --prefix=/usr/local
      make
      sudo make install
      VERSION=
      popd
      SCRIPT_RUN_PREFIX="singularity exec ${SIMAGE}"
    else
      # Configure ssh
      ssh-keygen -t rsa -f ~/.ssh/id_rsa -N ""
      chmod 700 ~/.ssh/
      cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
      chmod 600 ~/.ssh/authorized_keys
      ssh-keyscan -t rsa localhost >> ~/.ssh/known_hosts
      ssh-keyscan -t rsa 127.0.0.1 >> ~/.ssh/known_hosts
      chmod 600 ~/.ssh/known_hosts
      ls -al ~/.ssh/
      ssh localhost ls
      ssh 127.0.0.1 ls

      SCRIPT_RUN_PREFIX=
    fi

install:
  - |
    if [[ "$RUNMODE" != "docker" ]] && [[ "$RUNMODE" != "singularity" ]]; then
      # Install minimal conda
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      fi
      bash miniconda.sh -b -p $HOME/miniconda
      export PATH="$HOME/miniconda/bin:$PATH"
      hash -r
      conda config --set always_yes yes --set changeps1 no
      conda update -q conda
    fi
  - |
    if [[ "$RUNMODE" != "docker" ]] && [[ "$RUNMODE" != "singularity" ]]; then
      # Install conda packages
      ${TRAVIS_BUILD_DIR}/contrib/devenv/create.sh
      source ${TRAVIS_BUILD_DIR}/build/env/start
      ${TRAVIS_BUILD_DIR}/contrib/conda.sh
      ${TRAVIS_BUILD_DIR}/contrib/build-pybind11-in-conda.sh
      # Debugging information
      conda info -a
    elif [[ "$RUNMODE" == "docker"  ]]; then
      $SCRIPT_RUN_PREFIX id
      $SCRIPT_RUN_PREFIX apt-get -qq update
      $SCRIPT_RUN_PREFIX apt-get -qqy install fakeroot debhelper locales \
        libreadline7 libssl1.0.0 libffi6 \
        liblapack3 liblapack-dev libhdf5-100 libhdf5-dev libnetcdf13 \
        libnetcdf-dev libscotch-6.0 libscotch-dev cython3 python3 \
        python3-numpy libpython3.6-dev python3-boto python3-paramiko graphviz
    elif [[ "$RUNMODE" == "singularity"  ]]; then
      pushd ${SHOME}
      cp ${TRAVIS_BUILD_DIR}/sandbox/gas/tube/${SOLVCON_DRIVING} ${SHOME}
      # trick to inject TRAVIS_BRANCH and TRAVIS_REPO_SLUG
      echo '#!/bin/bash' > ${SHOME}/prepare-solvcon-dev.sh
      echo "export TRAVIS_BRANCH=${TRAVIS_BRANCH}" >> ${SHOME}/prepare-solvcon-dev.sh
      echo "export TRAVIS_REPO_SLUG=${TRAVIS_REPO_SLUG}" >> ${SHOME}/prepare-solvcon-dev.sh
      cat ${TRAVIS_BUILD_DIR}/contrib/singularity/prepare-solvcon-dev.sh >> ${SHOME}/prepare-solvcon-dev.sh
      cp ${TRAVIS_BUILD_DIR}/contrib/singularity/${SRECIPE} ${SHOME}
      sudo singularity build ${SIMAGE} ${SRECIPE}
      ls
      popd
    fi

script:
  # Debugging information
  - |
    # We do everything in the singularity container including unit tests. The
    # external environment could be very simple and does not have python3, so
    # we do not need to dump the following debugging information otherwise it
    # causes none-zero exit return code.
    if [[ "$RUNMODE" != "singularity" ]] ; then
      $SCRIPT_RUN_PREFIX which python3
      $SCRIPT_RUN_PREFIX python3 --version
      $SCRIPT_RUN_PREFIX which $CXX
      $SCRIPT_RUN_PREFIX $CXX --version
      $SCRIPT_RUN_PREFIX which $CC
      $SCRIPT_RUN_PREFIX $CC --version
    fi
  - |
    if [[ "$RUNMODE" != "singularity" ]] ; then
      $SCRIPT_RUN_PREFIX make SC_PURE_PYTHON=1 test_from_package
    fi
  - |
    if [[ "$RUNMODE" == "docker" ]] ; then
      $SCRIPT_RUN_PREFIX make deb
      $SCRIPT_RUN_PREFIX dpkg -i dist/debbuild/*.deb
      $SCRIPT_RUN_PREFIX bash -c "cd /tmp ; python3 -c 'import solvcon ; print(solvcon)'"
      $SCRIPT_RUN_PREFIX bash -c "cd /tmp ; python3 -c 'import solvcon ; solvcon.test()'"
    elif [[ "$RUNMODE" == "singularity" ]] ; then
      $SCRIPT_RUN_PREFIX ${TRAVIS_BUILD_DIR}/sandbox/gas/tube/${SOLVCON_DRIVING} run tube
    fi

after_script:
  - |
    if [[ "$RUNMODE" == "docker" ]] ; then
      docker stop "$containerid"
      docker rm "$containerid"
    elif [[ "$RUNMODE" == "singularity" ]] ; then
      rm -rf ${SHOME}
    fi
